import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

logging.basicConfig(level=logging.INFO)

class Form(StatesGroup):
    name = State()
    main_course = State()
    alcohol = State()
    alcohol_other = State()

@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    start_button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å", callback_data="start_form")]
    ])

    await bot.send_photo(
        chat_id=message.chat.id,
        photo="https://i.postimg.cc/MTf0j1W2/IMG-6156-EDIT.jpg",
        caption=(
            "üíç <b>–°–≤–∞–¥—å–±–∞ –ò–≥–æ—Ä—è –∏ –ê–Ω–∞—Å—Ç–∞—Å–∏–∏</b>\n\n"
            "üìÖ <b>–î–∞—Ç–∞:</b> 23 –∏—é–ª—è 2025\n"
            "üïõ <b>–í—Ä–µ–º—è:</b> 12:00 ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
            "üìç <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> <a href='https://yandex.ru/maps/-/CHrU5XZ4'>–ï–∫–∞—Ç–µ—Ä–∏–Ω–∏–Ω—Å–∫–∏–π –∑–∞–ª</a>\n"
            "üçΩ <b>–ë–∞–Ω–∫–µ—Ç:</b> <a href='https://yandex.ru/maps/-/CHrUBE2i'>–î–≤–∏–Ω –•–æ–ª–ª, –∑–∞–ª –õ–∞–π—Ç</a>\n"
            "üëó <b>–î—Ä–µ—Å—Å-–∫–æ–¥:</b> –∫–ª–∞—Å—Å–∏–∫–∞ –≤ –ø–∞—Å—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–Ω–∞—Ö (–Ω–µ —Å—Ç—Ä–æ–≥–æ)"
        ),
        parse_mode=ParseMode.HTML
    )

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ö—É–ø–∏–¥–æ–Ω—á–∏–∫ üíò\n–ì–æ—Ç–æ–≤(–∞) –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Å–≤–∞–¥—å–±–µ?",
        reply_markup=start_button
    )

@dp.callback_query(lambda c: c.data == "start_form")
async def handle_start_form(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    await callback.message.answer("üë§ –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–ò–º—è –∏ –§–∞–º–∏–ª–∏—è)")
    await state.set_state(Form.name)
    await callback.answer()

@dp.message(Form.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await ask_main_course(message, state)

async def ask_main_course(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üêü –†—ã–±–∞", callback_data="food:–†—ã–±–∞")],
        [InlineKeyboardButton(text="ü•© –ú—è—Å–æ", callback_data="food:–ú—è—Å–æ")],
        [InlineKeyboardButton(text="üçó –ö—É—Ä–∏—Ü–∞", callback_data="food:–ö—É—Ä–∏—Ü–∞")],
        [InlineKeyboardButton(text="ü•¶ –û–≤–æ—â–∏ –∏ –≥—Ä–∏–±—ã", callback_data="food:–û–≤–æ—â–∏ –∏ –≥—Ä–∏–±—ã")]
    ])
    await message.answer("üçΩ –ß—Ç–æ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª—é–¥–∞?", reply_markup=keyboard)
    await state.set_state(Form.main_course)

@dp.callback_query(lambda c: c.data.startswith("food:"))
async def select_food(callback: types.CallbackQuery, state: FSMContext):
    choice = callback.data.split(":")[1]
    await state.update_data(main_course=[choice])
    await callback.message.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {choice}")
    await ask_alcohol(callback.message, state)
    await callback.answer()

async def ask_alcohol(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üçæ –ò–≥—Ä–∏—Å—Ç–æ–µ", callback_data="alc:–ò–≥—Ä–∏—Å—Ç–æ–µ")],
        [InlineKeyboardButton(text="ü•Ç –ë–µ–ª–æ–µ –≤–∏–Ω–æ", callback_data="alc:–ë–µ–ª–æ–µ –≤–∏–Ω–æ")],
        [InlineKeyboardButton(text="üç∑ –ö—Ä–∞—Å–Ω–æ–µ –≤–∏–Ω–æ", callback_data="alc:–ö—Ä–∞—Å–Ω–æ–µ –≤–∏–Ω–æ")],
        [InlineKeyboardButton(text="ü•É –ö–æ–Ω—å—è–∫", callback_data="alc:–ö–æ–Ω—å—è–∫")],
        [InlineKeyboardButton(text="üç∏ –í–æ–¥–∫–∞", callback_data="alc:–í–æ–¥–∫–∞")],
        [InlineKeyboardButton(text="üßÉ –î—Ä—É–≥–æ–µ", callback_data="alc:–î—Ä—É–≥–æ–µ")],
        [InlineKeyboardButton(text="üìù –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_alcohol")]
    ])
    await message.answer("üç∑ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∞–ª–∫–æ–≥–æ–ª—é:", reply_markup=keyboard)
    await state.set_state(Form.alcohol)

@dp.callback_query(lambda c: c.data.startswith("alc:"))
async def select_alcohol(callback: types.CallbackQuery, state: FSMContext):
    choice = callback.data.split(":")[1]
    await callback.message.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {choice}")
    if choice == "–î—Ä—É–≥–æ–µ":
        await callback.message.answer("‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –∏–∑ –Ω–∞–ø–∏—Ç–∫–æ–≤")
        await state.set_state(Form.alcohol_other)
    else:
        await state.update_data(alcohol=[choice])
        await finish(callback.message, state)
    await callback.answer()

@dp.message(Form.alcohol_other)
async def handle_other_alcohol(message: types.Message, state: FSMContext):
    other = message.text.strip()
    data = await state.get_data()
    alcohol = data.get("alcohol", [])
    alcohol.append(other)
    await state.update_data(alcohol=alcohol)
    await finish(message, state)

@dp.callback_query(lambda c: c.data == "skip_alcohol")
async def skip_alcohol(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(alcohol=["(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)"])
    await callback.message.answer("‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: (–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)")
    await finish(callback.message, state)
    await callback.answer()

async def finish(message: types.Message, state: FSMContext):
    data = await state.get_data()

    summary = (
        f"<b>üì® –ù–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:</b>\n"
        f"üë§ <b>–ò–º—è:</b> {data['name']}\n"
        f"üçΩ <b>–ë–ª—é–¥–æ:</b> {', '.join(data.get('main_course', []))}\n"
        f"üç∑ <b>–ê–ª–∫–æ–≥–æ–ª—å:</b> {', '.join(data.get('alcohol', []))}"
    )

    if not ADMIN_CHAT_ID:
        await message.answer("‚ùå ADMIN_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ Render.")
        return
    try:
        await bot.send_message(chat_id=int(ADMIN_CHAT_ID), text=summary)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç: {e}")

    await message.answer("üéâ –°–ø–∞—Å–∏–±–æ! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ —Å–≤–∞–¥–µ–±–Ω–æ–º—É —á–∞—Ç—É: https://t.me/+T300ZeTouJ5kYjIy")
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
