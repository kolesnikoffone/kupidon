import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # —Å—Ç—Ä–æ–∫–∞ —Å chat_id –≤–∏–¥–∞ -100...

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

logging.basicConfig(level=logging.INFO)

class Form(StatesGroup):
    name = State()
    has_guests = State()
    guest_count = State()
    guest_names = State()
    main_course = State()
    alcohol = State()
    comment = State()

@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–≤–∞–¥—å–±—É üíç\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–ò–º—è –∏ –§–∞–º–∏–ª–∏—è)")
    await state.set_state(Form.name)

@dp.message(Form.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–î–∞")],[KeyboardButton(text="–ù–µ—Ç")]], resize_keyboard=True, one_time_keyboard=True)
    await message.answer("–ë—É–¥—É—Ç –ª–∏ —Å –≤–∞–º–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–æ—Å—Ç–∏?", reply_markup=keyboard)
    await state.set_state(Form.has_guests)

@dp.message(Form.has_guests)
async def ask_guest_count(message: types.Message, state: FSMContext):
    if message.text.strip().lower() == "–¥–∞":
        await message.answer("–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –±—É–¥–µ—Ç —Å –≤–∞–º–∏?", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(Form.guest_count)
    else:
        await state.update_data(guest_names=[])
        await ask_main_course(message, state)

@dp.message(Form.guest_count)
async def get_guest_count(message: types.Message, state: FSMContext):
    try:
        count = int(message.text.strip())
        await state.update_data(guest_count=count, guest_names=[])
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Å—Ç—è –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é")
        await state.set_state(Form.guest_names)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≥–æ—Å—Ç–µ–π —Ü–∏—Ñ—Ä–æ–π")

@dp.message(Form.guest_names)
async def get_guest_names(message: types.Message, state: FSMContext):
    data = await state.get_data()
    guests = data.get("guest_names", [])
    guests.append(message.text.strip())
    if len(guests) < data.get("guest_count", 0):
        await state.update_data(guest_names=guests)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∏–º—è")
    else:
        await state.update_data(guest_names=guests)
        await ask_main_course(message, state)

async def ask_main_course(message: types.Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    for food in ["–†—ã–±–∞", "–ú—è—Å–æ", "–ö—É—Ä–∏—Ü–∞", "–û–≤–æ—â–∏ –∏ –≥—Ä–∏–±—ã"]:
        builder.button(text=food, callback_data=f"food:{food}")
    await message.answer("–ß—Ç–æ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª—é–¥–∞?", reply_markup=builder.as_markup())
    await state.set_state(Form.main_course)

@dp.callback_query(lambda c: c.data.startswith("food:"))
async def get_food(callback: types.CallbackQuery, state: FSMContext):
    food_choice = callback.data.split(":")[1]
    await state.update_data(main_course=food_choice)
    await callback.message.edit_reply_markup()
    await callback.message.answer("–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∞–ª–∫–æ–≥–æ–ª—é (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º):\n–ò–≥—Ä–∏—Å—Ç–æ–µ, –ë–µ–ª–æ–µ –≤–∏–Ω–æ, –ö—Ä–∞—Å–Ω–æ–µ –≤–∏–Ω–æ, –ö–æ–Ω—å—è–∫, –í–æ–¥–∫–∞, –î—Ä—É–≥–æ–µ")
    await state.set_state(Form.alcohol)
    await callback.answer()

@dp.message(Form.alcohol)
async def get_alcohol(message: types.Message, state: FSMContext):
    choices = [c.strip() for c in message.text.split(",") if c.strip()]
    await state.update_data(alcohol=choices)
    skip_button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]
    ])
    await message.answer("–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö —Å–µ–π—á–∞—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=skip_button)
    await state.set_state(Form.comment)

@dp.callback_query(lambda c: c.data == "skip_comment")
async def skip_comment(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(comment="(–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)")
    await finish(callback.message, state)
    await callback.answer()

@dp.message(Form.comment)
async def finish(message: types.Message, state: FSMContext):
    data = await state.update_data(comment=message.text.strip())
    data = await state.get_data()

    summary = f"<b>üì® –ù–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:</b>\n"
    summary += f"üë§ <b>–ò–º—è:</b> {data['name']}\n"
    summary += f"üë• <b>–î–æ–ø. –≥–æ—Å—Ç–∏:</b> {', '.join(data.get('guest_names', ['–Ω–µ—Ç']))}\n"
    summary += f"üçΩ <b>–ë–ª—é–¥–æ:</b> {data['main_course']}\n"
    summary += f"üç∑ <b>–ê–ª–∫–æ–≥–æ–ª—å:</b> {', '.join(data.get('alcohol', []))}\n"
    summary += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {data['comment']}"

    await bot.send_message(chat_id=int(ADMIN_CHAT_ID), text=summary)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ —Å–≤–∞–¥–µ–±–Ω–æ–º—É —á–∞—Ç—É üéâ\nhttps://t.me/+T300ZeTouJ5kYjIy")
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
