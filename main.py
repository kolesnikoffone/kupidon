import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

logging.basicConfig(level=logging.INFO)

class Form(StatesGroup):
    name = State()
    main_course = State()
    alcohol = State()
    activities = State()

@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    await state.clear()

    await bot.send_photo(
        chat_id=message.chat.id,
        photo="https://i.postimg.cc/YCJ77THc/photo-2025-06-08-18-34-47.jpg",
        caption=(
            "üíç <b>–°–≤–∞–¥—å–±–∞ –ò–≥–æ—Ä—è –∏ –ê–Ω–∞—Å—Ç–∞—Å–∏–∏</b>\n\n"
            "üìÖ <b>–î–∞—Ç–∞:</b> 23 –∏—é–ª—è 2025\n"
            "üïõ <b>–í—Ä–µ–º—è:</b> 12:00 ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
            "üìç <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> <a href='https://yandex.ru/maps/-/CHrU5XZ4'>–ï–∫–∞—Ç–µ—Ä–∏–Ω–∏–Ω—Å–∫–∏–π –∑–∞–ª</a>\n"
            "üçΩ <b>–ë–∞–Ω–∫–µ—Ç:</b> <a href='https://yandex.ru/maps/-/CHrUBE2i'>–î–≤–∏–Ω –•–æ–ª–ª, –∑–∞–ª –õ–∞–π—Ç</a>\n"
            "üëó <b>–î—Ä–µ—Å—Å-–∫–æ–¥:</b> –∫–ª–∞—Å—Å–∏–∫–∞ –≤ –ø–∞—Å—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–Ω–∞—Ö (–Ω–µ —Å—Ç—Ä–æ–≥–æ)\n\n"
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ö—É–ø–∏–¥–æ–Ω—á–∏–∫ üíò\n"
            "–ì–æ—Ç–æ–≤(–∞) –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Å–≤–∞–¥—å–±–µ?"
        ),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å", callback_data="start_form")],
            [InlineKeyboardButton(
                text="üìÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å",
                url="https://www.google.com/calendar/render?action=TEMPLATE&text=–°–≤–∞–¥—å–±–∞+–ò–≥–æ—Ä—è+–∏+–ê–Ω–∞—Å—Ç–∞—Å–∏–∏&dates=20250723T120000/20250723T160000&ctz=Europe/Moscow&details=–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:+https://yandex.ru/maps/-/CHrU5XZ4+%0A–ë–∞–Ω–∫–µ—Ç:+https://yandex.ru/maps/-/CHrUBE2i+%0A–î—Ä–µ—Å—Å-–∫–æ–¥:+–∫–ª–∞—Å—Å–∏–∫–∞+–≤+–ø–∞—Å—Ç–µ–ª—å–Ω—ã—Ö+—Ç–æ–Ω–∞—Ö&location=–ï–∫–∞—Ç–µ—Ä–∏–Ω–∏–Ω—Å–∫–∏–π+–∑–∞–ª,+–î–≤–∏–Ω+–•–æ–ª–ª"
            )]
        ])
    )

@dp.callback_query(lambda c: c.data == "start_form")
async def handle_start_form(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üìÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å",
            url="https://www.google.com/calendar/render?action=TEMPLATE&text=–°–≤–∞–¥—å–±–∞+–ò–≥–æ—Ä—è+–∏+–ê–Ω–∞—Å—Ç–∞—Å–∏–∏&dates=20250723T120000/20250723T160000&ctz=Europe/Moscow&details=–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:+https://yandex.ru/maps/-/CHrU5XZ4+%0A–ë–∞–Ω–∫–µ—Ç:+https://yandex.ru/maps/-/CHrUBE2i+%0A–î—Ä–µ—Å—Å-–∫–æ–¥:+–∫–ª–∞—Å—Å–∏–∫–∞+–≤+–ø–∞—Å—Ç–µ–ª—å–Ω—ã—Ö+—Ç–æ–Ω–∞—Ö&location=–ï–∫–∞—Ç–µ—Ä–∏–Ω–∏–Ω—Å–∫–∏–π+–∑–∞–ª,+–î–≤–∏–Ω+–•–æ–ª–ª"
        )]
    ]))
    await callback.message.answer("üë§ –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–ò–º—è –∏ –§–∞–º–∏–ª–∏—è)")
    await state.set_state(Form.name)

@dp.message(Form.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üêü –†—ã–±–∞", callback_data="food:–†—ã–±–∞")],
        [InlineKeyboardButton(text="ü•© –ú—è—Å–æ", callback_data="food:–ú—è—Å–æ")],
        [InlineKeyboardButton(text="üçó –ö—É—Ä–∏—Ü–∞", callback_data="food:–ö—É—Ä–∏—Ü–∞")],
        [InlineKeyboardButton(text="ü•¶ –û–≤–æ—â–∏ –∏ –≥—Ä–∏–±—ã", callback_data="food:–û–≤–æ—â–∏ –∏ –≥—Ä–∏–±—ã")]
    ])
    await message.answer("üçΩ –ß—Ç–æ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª—é–¥–∞?", reply_markup=keyboard)
    await state.set_state(Form.main_course)

@dp.callback_query(lambda c: c.data.startswith("food:"))
async def select_main_course(callback: types.CallbackQuery, state: FSMContext):
    choice = callback.data.split(":")[1]
    await callback.message.edit_reply_markup()
    await callback.message.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {choice}")
    await state.update_data(main_course=choice)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üçæ –ò–≥—Ä–∏—Å—Ç–æ–µ", callback_data="alc:–ò–≥—Ä–∏—Å—Ç–æ–µ")],
        [InlineKeyboardButton(text="ü•Ç –ë–µ–ª–æ–µ –≤–∏–Ω–æ", callback_data="alc:–ë–µ–ª–æ–µ –≤–∏–Ω–æ")],
        [InlineKeyboardButton(text="üç∑ –ö—Ä–∞—Å–Ω–æ–µ –≤–∏–Ω–æ", callback_data="alc:–ö—Ä–∞—Å–Ω–æ–µ –≤–∏–Ω–æ")],
        [InlineKeyboardButton(text="ü•É –ö–æ–Ω—å—è–∫", callback_data="alc:–ö–æ–Ω—å—è–∫")],
        [InlineKeyboardButton(text="üç∏ –í–æ–¥–∫–∞", callback_data="alc:–í–æ–¥–∫–∞")],
        [InlineKeyboardButton(text="üìù –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="alc:–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]
    ])
    await callback.message.answer("üç∑ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∞–ª–∫–æ–≥–æ–ª—é:", reply_markup=keyboard)
    await state.set_state(Form.alcohol)

@dp.callback_query(lambda c: c.data.startswith("alc:"))
async def select_alcohol(callback: types.CallbackQuery, state: FSMContext):
    choice = callback.data.split(":")[1]
    await callback.message.edit_reply_markup()
    await callback.message.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {choice}")
    await state.update_data(alcohol=choice)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéâ –î–∞, –æ—á–µ–Ω—å —Ö–æ—á—É!", callback_data="act:yes")],
        [InlineKeyboardButton(text="ü§î –ú–æ–∂–µ—Ç –±—ã—Ç—å", callback_data="act:maybe")],
        [InlineKeyboardButton(text="üçΩ –û—Å—Ç–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –ø–æ–∫–æ–µ, —è —Ö–æ—á—É –ø–æ–∫—É—à–∞—Ç—å", callback_data="act:no")]
    ])
    await callback.message.answer("üé≠ –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö –æ—Ç –≤–µ–¥—É—â–µ–≥–æ?", reply_markup=keyboard)
    await state.set_state(Form.activities)

    data = await state.get_data()
    summary = (
        f"üì® –ù–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:
"
        f"üë§ –ò–º—è: {data.get('name')}
"
        f"üçΩ –ë–ª—é–¥–æ: {data.get('main_course')}
"
        f"üç∑ –ê–ª–∫–æ–≥–æ–ª—å: {data.get('alcohol')}
"
        f"üé≠ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {data.get('activities')}"
    )}\n"
        f"üçΩ –ë–ª—é–¥–æ: {data.get('main_course')}\n"
        f"üç∑ –ê–ª–∫–æ–≥–æ–ª—å: {data.get('alcohol')}"
    )

    if ADMIN_CHAT_ID:
        try:
            await bot.send_message(chat_id=int(ADMIN_CHAT_ID), text=summary)
        except Exception as e:
            await callback.message.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")

    await callback.message.answer("üéâ –°–ø–∞—Å–∏–±–æ! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ —Å–≤–∞–¥–µ–±–Ω–æ–º—É —á–∞—Ç—É: https://t.me/+T300ZeTouJ5kYjIy")
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("act:"))
async def select_activities(callback: types.CallbackQuery, state: FSMContext):
    choice = callback.data.split(":")[1]
    text = {
        "yes": "üéâ –î–∞, –æ—á–µ–Ω—å —Ö–æ—á—É!",
        "maybe": "ü§î –ú–æ–∂–µ—Ç –±—ã—Ç—å",
        "no": "üçΩ –û—Å—Ç–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –ø–æ–∫–æ–µ, —è —Ö–æ—á—É –ø–æ–∫—É—à–∞—Ç—å"
    }.get(choice, choice)
    await callback.message.edit_reply_markup()
    await callback.message.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {text}")
    await state.update_data(activities=text)

    data = await state.get_data()
    summary = (
        f"üì® –ù–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:
"
        f"üë§ –ò–º—è: {data.get('name')}
"
        f"üçΩ –ë–ª—é–¥–æ: {data.get('main_course')}
"
        f"üç∑ –ê–ª–∫–æ–≥–æ–ª—å: {data.get('alcohol')}
"
        f"üé≠ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {data.get('activities')}"
    )

    if ADMIN_CHAT_ID:
        try:
            await bot.send_message(chat_id=int(ADMIN_CHAT_ID), text=summary)
        except Exception as e:
            await callback.message.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")

    await callback.message.answer("üéâ –°–ø–∞—Å–∏–±–æ! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ —Å–≤–∞–¥–µ–±–Ω–æ–º—É —á–∞—Ç—É: https://t.me/+T300ZeTouJ5kYjIy")
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
